	uniform vec3 lightPos;
	uniform float farplane;

	uniform samplerCube shadowMap;

	float shadowFunc(vec3 pos)
	{
	   // get vector between fragment position and light position
	    vec3 fragToLight = pos - lightPos;
	    // use the light to fragment vector to sample from the depth map    
	    float closestDepth = texture(shadowMap, fragToLight).r;
	    // it is currently in linear range between [0,1]. Re-transform back to original value
	    closestDepth *= farplane;
	    // now get current linear depth as the length between the fragment and light position
	    float currentDepth = length(fragToLight);
	    // now test for shadows
	    float bias = 0.05; 
	    float shadow = currentDepth -  bias > closestDepth ? 1.0 : 0.0;

	    return shadow;
	}
